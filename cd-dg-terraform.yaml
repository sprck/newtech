provider "aws" {
  region = "your-region" # Replace with your AWS region
}

# Fetch Datadog API key from AWS Systems Manager Parameter Store
data "aws_ssm_parameter" "datadog_api_key" {
  name = "/datadog/apiKey"
}

# CloudWatch Log Group
resource "aws_cloudwatch_log_group" "example_log_group" {
  name              = "/aws/lambda/example-log-group"
  retention_in_days = 14
}

# IAM Role for Firehose Delivery Stream
resource "aws_iam_role" "firehose_delivery_role" {
  name = "firehose_delivery_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "firehose.amazonaws.com"
        }
      },
    ]
  })
}

# IAM Policy for Firehose to access resources
resource "aws_iam_policy" "firehose_policy" {
  name   = "firehose_policy"
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
          "s3:AbortMultipartUpload",
          "s3:GetBucketLocation",
          "s3:GetObject",
          "s3:ListBucket",
          "s3:ListBucketMultipartUploads",
          "s3:PutObject"
        ]
        Effect   = "Allow"
        Resource = [
          "arn:aws:s3:::your-backup-bucket",
          "arn:aws:s3:::your-backup-bucket/*",
        ]
      },
      {
        Action = [
          "logs:PutLogEvents"
        ]
        Effect   = "Allow"
        Resource = "*"
      },
    ]
  })
}

# Attach policy to role
resource "aws_iam_role_policy_attachment" "firehose_policy_attach" {
  role       = aws_iam_role.firehose_delivery_role.name
  policy_arn = aws_iam_policy.firehose_policy.arn
}

# Kinesis Firehose Delivery Stream
resource "aws_kinesis_firehose_delivery_stream" "to_datadog_stream" {
  name        = "aws-to-datadog-stream"
  destination = "http_endpoint"

  http_endpoint_configuration {
    url               = "https://${var.YOUR_DATADOG_HOST}/v1/input/${data.aws_ssm_parameter.datadog_api_key.value}"
    access_key        = data.aws_ssm_parameter.datadog_api_key.value
    name              = "DatadogEndpoint"
    buffering_interval = 60
    buffering_size     = 5
    request_configuration {
      content_encoding = "GZIP"
    }
    cloudwatch_logging_options {
      enabled         = true
      log_group_name  = aws_cloudwatch_log_group.example_log_group.name
      log_stream_name = "FirehoseDelivery"
    }
  }

  s3_configuration {
    role_arn   = aws_iam_role.firehose_delivery_role.arn
    bucket_arn = "arn:aws:s3:::your-backup-bucket"
  }
}

# CloudWatch Logs Subscription Filter
resource "aws_cloudwatch_log_subscription_filter" "example_log_group_filter" {
  name            = "example_log_group_filter"
  log_group_name  = aws_cloudwatch_log_group.example_log_group.name
  filter_pattern  = ""
  destination_arn = aws_kinesis_firehose_delivery_stream.to_datadog_stream.arn
  role_arn        = aws_iam_role.firehose_delivery_role.arn
}
